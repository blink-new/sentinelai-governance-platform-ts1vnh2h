version: '3.8'

services:
  # MongoDB for policy and user storage
  mongodb:
    image: mongo:7.0
    container_name: sentinelai-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: sentinelai
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - sentinelai-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7.2-alpine
    container_name: sentinelai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - sentinelai-network

  # FastAPI Python server
  fastapi-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: sentinelai-fastapi
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/sentinelai?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - LOG_LEVEL=INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server:/app
      - /app/__pycache__
    networks:
      - sentinelai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust CLI (built as service for demonstration)
  rust-cli:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: sentinelai-rust
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/sentinelai?authSource=admin
      - FASTAPI_URL=http://fastapi-server:8000
    depends_on:
      - mongodb
      - fastapi-server
    networks:
      - sentinelai-network
    command: ["sentinelai", "guard", "--host", "0.0.0.0", "--port", "8080"]

  # Next.js Web Dashboard
  web-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: sentinelai-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_RUST_CLI_URL=http://localhost:8080
    depends_on:
      - fastapi-server
      - rust-cli
    networks:
      - sentinelai-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: sentinelai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sentinelai-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: sentinelai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sentinelai-network

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  sentinelai-network:
    driver: bridge